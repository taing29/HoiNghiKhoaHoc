@using HoiNghiKhoaHoc.Models
@model HoiNghiKhoaHoc.Models.Conference

<script src="~/ckeditor5-build-classic-19.0.0/build/ckeditor.js"></script>

@{
    ViewData["Title"] = "Cập Nhật Hội Nghị";
    Layout = "~/Views/Shared/_Layout_Admin.cshtml";
}

<h2>Cập Nhật Hội Nghị</h2>

<form asp-action="Update" method="post" enctype="multipart/form-data">
    <input type="hidden" asp-for="Id" />

    <div class="form-group">
        <label for="speakerCount">Chọn số lượng diễn giả:</label>
        <select id="speakerCount" class="form-control">
            <option value="0">-- Chọn --</option>
            @for (int i = 1; i <= 10; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>
    <div id="speakersContainer"></div>

    <div class="form-group">
        <label asp-for="BannerImage" class="form-label">Ảnh chủ đề</label>
        <input type="file" name="imageFile" class="form-control" />
        <input type="hidden" name="OldBannerImage" value="@Model.BannerImage" />
        @if (!string.IsNullOrEmpty(Model.BannerImage))
        {
            <div class="mt-2">
                <label class="form-label fw-semibold">Ảnh hiện tại:</label>
                <img id="previewImage" src="@Model.BannerImage" alt="Ảnh hội nghị" class="img-thumbnail" style="max-height: 150px;" />
            </div>
        }
        else
        {
            <div class="mt-2 d-none" id="previewContainer">
                <label class="form-label fw-semibold">Ảnh xem trước:</label>
                <img id="previewImage" class="img-thumbnail" style="max-height: 150px;" />
            </div>
        }
    </div>
    <input type="hidden" name="OldBannerImage" value="@Model.BannerImage" />

    <div class="form-group">
        <label asp-for="Title">Tiêu đề</label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Description">Mô tả</label>
        <input asp-for="Description" class="form-control" />
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Content">Nội dung</label>
        <textarea asp-for="Content" id="Content" class="form-control"></textarea>
        <span asp-validation-for="Content" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="StartDate">Ngày bắt đầu</label>
        <input asp-for="StartDate" class="form-control" type="datetime-local" />
        <span asp-validation-for="StartDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="EndDate">Ngày kết thúc</label>
        <input asp-for="EndDate" class="form-control" type="datetime-local" />
        <span asp-validation-for="EndDate" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="CategoryId">Danh mục</label>
        <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="form-control"></select>
    </div>

    <div class="form-group form-check">
        <input asp-for="IsInternational" class="form-check-input" type="checkbox" />
        <label asp-for="IsInternational" class="form-check-label">Hội nghị quốc tế</label>
    </div>

    <button type="submit" class="btn btn-primary">Lưu thay đổi</button>
    <a asp-controller="Conferences" asp-action="Index" asp-area="Admin" class="btn btn-success">Trở về</a>
</form>

<!-- Kích hoạt CKEditor -->
<script>
    class MyUploadAdapter {
        constructor(loader) {
            this.loader = loader;
        }

        upload() {
            return this.loader.file
                .then(file => new Promise((resolve, reject) => {
                    this._initRequest();
                    this._initListeners(resolve, reject, file);
                    this._sendRequest(file);
                }));
        }

        abort() {
            if (this.xhr) {
                this.xhr.abort();
            }
        }

        _initRequest() {
            const xhr = this.xhr = new XMLHttpRequest();
            xhr.open('POST', '@Url.Action("UploadImage", "ImageUpload", new { area = "Admin" })', true);
            xhr.responseType = 'json';
        }

        _initListeners(resolve, reject, file) {
            const xhr = this.xhr;
            const loader = this.loader;
            const genericErrorText = `Couldn't upload file: ${file.name}.`;

            xhr.addEventListener('error', () => reject(genericErrorText));
            xhr.addEventListener('abort', () => reject());
            xhr.addEventListener('load', () => {
                const response = xhr.response;

                if (!response || response.error) {
                    return reject(response && response.error ? response.error.message : genericErrorText);
                }

                resolve({
                    default: response.url
                });
            });

            if (xhr.upload) {
                xhr.upload.addEventListener('progress', evt => {
                    if (evt.lengthComputable) {
                        loader.uploadTotal = evt.total;
                        loader.uploaded = evt.loaded;
                    }
                });
            }
        }

        _sendRequest(file) {
            const data = new FormData();
            data.append('upload', file);
            this.xhr.send(data);
        }
    }

    function MyCustomUploadAdapterPlugin(editor) {
        editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
            return new MyUploadAdapter(loader);
        };
    }

    ClassicEditor
        .create(document.querySelector('#Content'), {
            extraPlugins: [MyCustomUploadAdapterPlugin]
        })
        .then(editor => {
            window.editor = editor;
        })
        .catch(error => {
            console.error(error);
        });
</script>

<script>
    document.getElementById("speakerCount").addEventListener("change", function () {
        const count = parseInt(this.value);
        const container = document.getElementById("speakersContainer");
        container.innerHTML = "";

        for (let i = 1; i <= count; i++) {
            const wrapper = document.createElement("div");
            wrapper.classList.add("form-group");
            wrapper.innerHTML = `
                <label>Diễn giả ${i}:</label>
                <input type="text" class="form-control speaker-search" data-index="${i}" placeholder="Nhập tên diễn giả...">
                <div class="search-results border rounded mt-1 p-2" id="results-${i}" style="max-height: 200px; overflow-y: auto;"></div>
                <input type="hidden" name="SpeakerIds[]" id="speaker-id-${i}" />
            `;
            container.appendChild(wrapper);
        }
    });

    document.addEventListener("input", function (e) {
        if (e.target.classList.contains("speaker-search")) {
            const index = e.target.dataset.index;
            const query = e.target.value.trim();

            if (query.length < 2) {
                document.getElementById(`results-${index}`).innerHTML = "";
                return;
            }

            fetch(`/Admin/Speakers/SearchByName?name=${encodeURIComponent(query)}`)
                .then(res => res.json())
                .then(data => {
                    const resultsDiv = document.getElementById(`results-${index}`);
                    resultsDiv.innerHTML = "";

                    if (data.length === 0) {
                        resultsDiv.innerHTML = `<div>Không tìm thấy diễn giả nào.</div>`;
                        return;
                    }

                    data.forEach(speaker => {
                        const speakerDiv = document.createElement("div");
                        speakerDiv.classList.add("p-2", "border", "rounded", "mb-1");
                        speakerDiv.style.cursor = "pointer";
                        speakerDiv.innerHTML = `
                            <div class="d-flex align-items-center">
                                <img src="${speaker.photoUrl}" alt="Ảnh" width="50" class="mr-2 rounded-circle">
                                <div>
                                    <strong>${speaker.fullName}</strong><br>
                                    ${speaker.title}, ${speaker.affiliation}<br>
                                    <small>${speaker.email}</small>
                                </div>
                            </div>
                        `;

                        speakerDiv.addEventListener("click", () => {
                            // Đặt tên diễn giả vào ô input
                            e.target.value = speaker.fullName;

                            // Ẩn danh sách gợi ý
                            resultsDiv.innerHTML = "";

                            // Lưu ID vào hidden input
                            document.getElementById(`speaker-id-${index}`).value = speaker.id;
                        });

                        resultsDiv.appendChild(speakerDiv);
                    });
                });
        }
    });
</script>
<script>
    // Danh sách diễn giả đã gán (render từ Razor)
    const existingSpeakers = @Html.Raw(Json.Serialize(ViewBag.ExistingSpeakers ?? new List<Speaker>()));

    // Tự động hiển thị các diễn giả cũ
    window.addEventListener("DOMContentLoaded", () => {
        const container = document.getElementById("speakersContainer");
        const selectBox = document.getElementById("speakerCount");

        if (existingSpeakers.length > 0) {
            selectBox.value = existingSpeakers.length;

            existingSpeakers.forEach((speaker, index) => {
                const i = index + 1;
                const wrapper = document.createElement("div");
                wrapper.classList.add("form-group");
                wrapper.innerHTML = `
                    <label>Diễn giả ${i}:</label>
                    <input type="text" class="form-control speaker-search" data-index="${i}" placeholder="Nhập tên diễn giả..." value="${speaker.fullName}">
                    <div class="search-results border rounded mt-1 p-2" id="results-${i}" style="max-height: 200px; overflow-y: auto;"></div>
                    <input type="hidden" name="SpeakerIds[]" id="speaker-id-${i}" value="${speaker.id}" />
                `;
                container.appendChild(wrapper);
            });
        }
    });
</script>
@section Scripts {
    <script>
        document.getElementById('imageInput')?.addEventListener('change', function (event) {
            const file = event.target.files[0];
            const previewImage = document.getElementById('previewImage');
            const previewContainer = document.getElementById('previewContainer');

            if (file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    previewImage.src = e.target.result;
                    previewImage.classList.remove('d-none');
                    if (previewContainer) {
                        previewContainer.classList.remove('d-none');
                    }
                };
                reader.readAsDataURL(file);
            }
        });
    </script>
}
